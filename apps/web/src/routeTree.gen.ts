/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteRouteImport } from './routes/_dashboard/route'
import { Route as DashboardIndexRouteImport } from './routes/_dashboard/index'
import { Route as DashboardUsersRouteImport } from './routes/_dashboard/users'
import { Route as DashboardTransactionsRouteImport } from './routes/_dashboard/transactions'
import { Route as DashboardProductsRouteImport } from './routes/_dashboard/products'
import { Route as DashboardInventoryRouteImport } from './routes/_dashboard/inventory'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardUsersRoute = DashboardUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardTransactionsRoute = DashboardTransactionsRouteImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardProductsRoute = DashboardProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardInventoryRoute = DashboardInventoryRouteImport.update({
  id: '/inventory',
  path: '/inventory',
  getParentRoute: () => DashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/inventory': typeof DashboardInventoryRoute
  '/products': typeof DashboardProductsRoute
  '/transactions': typeof DashboardTransactionsRoute
  '/users': typeof DashboardUsersRoute
  '/': typeof DashboardIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/inventory': typeof DashboardInventoryRoute
  '/products': typeof DashboardProductsRoute
  '/transactions': typeof DashboardTransactionsRoute
  '/users': typeof DashboardUsersRoute
  '/': typeof DashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_dashboard/inventory': typeof DashboardInventoryRoute
  '/_dashboard/products': typeof DashboardProductsRoute
  '/_dashboard/transactions': typeof DashboardTransactionsRoute
  '/_dashboard/users': typeof DashboardUsersRoute
  '/_dashboard/': typeof DashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/inventory'
    | '/products'
    | '/transactions'
    | '/users'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/inventory' | '/products' | '/transactions' | '/users' | '/'
  id:
    | '__root__'
    | '/_dashboard'
    | '/login'
    | '/_dashboard/inventory'
    | '/_dashboard/products'
    | '/_dashboard/transactions'
    | '/_dashboard/users'
    | '/_dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/': {
      id: '/_dashboard/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/users': {
      id: '/_dashboard/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof DashboardUsersRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/transactions': {
      id: '/_dashboard/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof DashboardTransactionsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/products': {
      id: '/_dashboard/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof DashboardProductsRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/_dashboard/inventory': {
      id: '/_dashboard/inventory'
      path: '/inventory'
      fullPath: '/inventory'
      preLoaderRoute: typeof DashboardInventoryRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardInventoryRoute: typeof DashboardInventoryRoute
  DashboardProductsRoute: typeof DashboardProductsRoute
  DashboardTransactionsRoute: typeof DashboardTransactionsRoute
  DashboardUsersRoute: typeof DashboardUsersRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardInventoryRoute: DashboardInventoryRoute,
  DashboardProductsRoute: DashboardProductsRoute,
  DashboardTransactionsRoute: DashboardTransactionsRoute,
  DashboardUsersRoute: DashboardUsersRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
