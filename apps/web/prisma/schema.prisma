// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        String   @id @default(uuid())
  fullName  String   @default("")
  username  String   @unique
  password  String   @default("")
  role      String   @default("staff")
  isActive  Boolean  @default(true)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  Products       Products[]
  ProductHistory ProductHistory[]
  Sales          Sales[]
  ReturnedItems  ReturnedItems[]
}

model Products {
  id             Int      @id @default(autoincrement())
  name           String   @default("")
  price          Decimal  @default(0) @db.Decimal(10, 2)
  description    String   @default("")
  category       String   @default("medicine")
  stockQuantity  Int      @default(0)
  image64Base    String   @default("")
  sku            String   @default("")
  barcode        String   @default("")
  expirationDate DateTime @default(now())
  deliveryDate   DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  ProductHistory ProductHistory[]
  Sales          Sales[]
  SaleItems      SaleItems[]
  ReturnedItems  ReturnedItems[]
}

//Create the Product History table to track changes in product inventory
model ProductHistory {
  id             Int      @id @default(autoincrement())
  name           String   @default("")
  price          Decimal  @default(0) @db.Decimal(10, 2)
  description    String   @default("")
  category       String   @default("medicine")
  stockQuantity  Int      @default(0)
  image64Base    String   @default("")
  sku            String   @default("")
  barcode        String   @default("")
  expirationDate DateTime @default(now())
  deliveryDate   DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  productId Int
  product   Products @relation(fields: [productId], references: [id])
}

//Create the Sales table to track transactions
model Sales {
  id            Int      @id @default(autoincrement())
  invoiceNumber String   @unique
  totalAmount   Decimal  @default(0) @db.Decimal(10, 2)
  paymentMethod String
  customerName  String
  status        String   @default("completed")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  productId Int
  product   Products @relation(fields: [productId], references: [id])

  SaleItems     SaleItems[]
  ReturnedItems ReturnedItems[]
}

//Create the Sale Items table to track items in each sale
model SaleItems {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  unitPrice Decimal @default(0) @db.Decimal(10, 2)
  subTotal  Decimal @default(0) @db.Decimal(10, 2)

  productId Int
  product   Products @relation(fields: [productId], references: [id])
  saleId    Int
  sale      Sales    @relation(fields: [saleId], references: [id])
}

//Create the Returned Items table to track product returns
model ReturnedItems {
  id           Int      @id @default(autoincrement())
  quantity     Int      @default(1)
  reason       String
  refundAmount Decimal  @default(0) @db.Decimal(10, 2)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  saleId    Int
  sale      Sales    @relation(fields: [saleId], references: [id])
}
